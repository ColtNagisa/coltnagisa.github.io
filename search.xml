<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>begin</title>
    <url>/2020/04/24/1/</url>
    <content><![CDATA[<p>从树莓派转至Github Pages，上个月我把博客部署到树莓派上，采用nginx+php+sqlite+typecho并frp外网。但我不放心树莓派24h开机，最终还是把博客部署到github上用hexo搭建。申请了一个域名c0lt.com，colt.com注册不到，总归比原来顺眼多了。主题使用next，换了几个主题还是觉得这个比较好。这次经历也让我学习了git，上个月折腾树莓派，让我补了不少计算机网络知识，Linux也更加熟悉。</p>
<p>博客主要是日常的发现与所思所想，不想搞得太复杂.</p>
]]></content>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
  <entry>
    <title>更换DNS解析与CDN</title>
    <url>/2020/04/24/2/</url>
    <content><![CDATA[<p><strong>注册域名时使用了阿里云的DNS解析，现更换CloudFlare DNS并使用CDN。</strong></p>
<ol>
<li><p>将原DNS dns21.hichina.com dns22.hichina.com更换为harlee.ns.cloudflare.com weston.ns.cloudflare.com。</p>
</li>
<li><p>停止阿里云解析，开启CloudFlare，勾选CDN。</p>
</li>
<li><p>开启Under Attack 模式，打开网页后出现五秒盾。</p>
</li>
<li><p>进行SSL设置</p>
</li>
</ol>
<p>现在网站已有SSL证书，并由CloudFlare保护防止DDoS ，管不管用就不知道了。</p>
<p><em>找到一个不错的图床，名为路过图床。</em></p>
<p><img src="https://s1.ax1x.com/2020/04/24/JDe0vF.png" alt="证书"></p>
<p>最初我不想折腾CDN和SSL，但当我突然意识到colt.com是什么网站后，想想还是加上吧。</p>
]]></content>
      <tags>
        <tag>CS沉思</tag>
      </tags>
  </entry>
  <entry>
    <title>存在的意义</title>
    <url>/2020/05/12/5/</url>
    <content><![CDATA[<p>几年前的奇葩说里面，我非常喜欢刘可乐进场时的那段话，她自述有双相情感障碍，找过很多心理医生，同时也很想去想明白人生的意义到底在哪里。</p>
<p>直到有一天，有人问她：意义的意义又是什么呢？乍听起来是很绕，但是一瞬间就解开了所有问题，是啊，当我们自以为脱离了庸俗，去思考哲学的终极问题时，想要去找到人生意义的答案，这种行为本身就是没有意义的。</p>
<p>当我们自以为众人皆醉我独醒的时候，也许人人都在忙碌的间隙里晃过这样一个问题：人生的意义是什么。我们不仅仅不特殊，甚至还是一个个重复的人类个体。</p>
<p>以前我很喜欢毕淑敏给出的答案「人生的意义是需要你去赋予的」，但现在我更喜欢加缪所言没有意义的人生反而可以更好过活，「重要的不是治愈，而是带着病痛活下去」。</p>
<p>浪漫派巴罗克风格的一位艺术家，曾经有过高论：「一切精神生活的目的就是成为上帝。」愿我们成为自己生活里的上帝。</p>
<p>sspai 猫敏敏</p>
]]></content>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
  <entry>
    <title>念奴娇·郑铁一中</title>
    <url>/2020/06/24/7/</url>
    <content><![CDATA[<p>​                                                                           念奴娇·郑铁一中<br>黄河正泻,问河流此水,何年淘净。露冷三更刚挂起,悄见一帆轻影。陇海桥边,茭蒲顷里,玉镜飞寒莹。夕阳无力,碧天推上孤艇。</p>
<p>遥想当日中兴,人文昌盛,光焰雄吴晋。坐对画图心自醉,把酒临风横咏。禹甸梅开,尧阶草绿,逝者如斯永。埃尘不到,闭门独卧清省。</p>
]]></content>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2020/04/29/4/</url>
    <content><![CDATA[<p><strong>用hexo在github上部署博客，自然少不了git的使用，以下是我学习git的过程。</strong></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="1-Git定义"><a href="#1-Git定义" class="headerlink" title="1.Git定义"></a>1.Git定义</h2><p>git是一种先进的分布式版本控制系统，是linus为了帮助管理 linux 内核开发而开发的一个开放源码的版本控制软件。</p>
<h2 id="2-Git的安装"><a href="#2-Git的安装" class="headerlink" title="2.Git的安装"></a>2.Git的安装</h2><p>2.1 在windows下可在<a href="https://git-scm.com/" target="_blank" rel="noopener">官网</a>下载，选择对应的安装包，正确安装后就可以右键出现Git Bush Here和Git GUI Here。</p>
<p>2.2  在linux下相对方便些，直接<code>sudo apt-get install git</code>，注意是ubuntu和debian。</p>
<p>2.3 macos的xcode带有git，可在xcode中添加。</p>
<h2 id="3-绑定github与生成ssh-key"><a href="#3-绑定github与生成ssh-key" class="headerlink" title="3.绑定github与生成ssh key"></a>3.绑定github与生成ssh key</h2><p>1.找到git bush，进行name和email的绑定。 配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"gitHub用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"gitHub注册邮箱"</span></span><br></pre></td></tr></table></figure>

<p>2.生成ssh key。配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"gitHub注册邮箱"</span></span><br></pre></td></tr></table></figure>

<p>回车到底，按照提示找到.ssh文件夹中的id_rsa.pub，将密钥复制。</p>
<p>打开github的<a href="https://github.com/settings/keys" target="_blank" rel="noopener">keys设置页面</a>，新建ssh key。</p>
<p><img src="https://s1.ax1x.com/2020/04/29/JokhPf.png" alt="key"></p>
<p>名称随意，把密钥复制进来。确定后在git bush中输入<code>ssh git@github.com</code></p>
<p><img src="https://s1.ax1x.com/2020/04/29/Jok5RS.png" alt="成功"></p>
<p>waring可以不用理会，不喜欢可在host中修改。总之，出现如下欢迎页就算是成功了。</p>
<p>这样就将公钥放置到github上，而私钥放置在自己的电脑里了。每一次git都会进行密钥匹配，以保证推送合法。</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h2 id="1-版本库（仓库）"><a href="#1-版本库（仓库）" class="headerlink" title="1.版本库（仓库）"></a>1.版本库（仓库）</h2><p>1.1 在合适的地方创建一个文件夹，在文件夹中右键git bush here，通过<code>git init</code>初始化仓库。接下来创建一个txt文档试验一下，这里我命名为test.txt，输入内容。</p>
<p>1.2 通过<code>git add test.txt</code>命令添加至仓库。（这一步没有任何提示信息）</p>
<p>1.3 通过<code>git commit -m &quot;*&quot;</code>将文件提交，其中**是描述，为了方便区分，最好加上。这里的描述为just a test。当然，git commit可以在add所有文件后再执行。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add test1.txt</span><br><span class="line">git add test2.txt test3.txt</span><br><span class="line">git commit -m &quot;add 3 test.&quot;</span><br></pre></td></tr></table></figure>

<h2 id="2-备份与恢复"><a href="#2-备份与恢复" class="headerlink" title="2.备份与恢复"></a>2.备份与恢复</h2><p>输入<code>git status</code>可查看仓库的状态，若提示有所变动，则输入<code>git status</code>可查看文件进行了怎样的修改。</p>
<p>2.1 将test.txt文件内容进行修改，add后commit。想知道自己做了什么用<code>git log</code>查看日志。<code>git log --pretty=oneline</code>可相对简略些。</p>
<p><img src="https://s1.ax1x.com/2020/04/29/JoAKLd.png" alt=""></p>
<p>commit后的一串数字是commit id，以SHA1计算。</p>
<p>2.2 图中HEAD指这是当前版本，HEAD^就为上一版本，往上66个版本就为HEAD~66。要回到上一版本，可通过<code>git reset --hard HEAD^</code>实现。但通过git log发现，原来的版本不见了。如果能找到原来版本的id，那么可输入 <code>git reset --hard 8ca8</code>返回，id没必要写全，前几位即可。但找不到id怎么办？可用<code>git reflog</code>找到你的每一次命令。</p>
<p><img src="https://s1.ax1x.com/2020/04/29/JoANQg.png" alt=""></p>
<p>id就在前面。</p>
<h2 id="3-工作区与暂存区"><a href="#3-工作区与暂存区" class="headerlink" title="3.工作区与暂存区"></a>3.工作区与暂存区</h2><p>工作区就是文件夹目录，比如文件夹test。</p>
<p>版本库是工作区中的一个隐藏目录<code>.git</code>，它不算工作区。版本库中有名为<code>stage</code>的暂存区、<code>git</code>自动创建的分支<code>master</code>、指向<code>master</code>的指针<code>HEAD</code>。<img src="https://s1.ax1x.com/2020/05/03/JzknLn.jpg" alt="git-repo"></p>
<p><code>git add</code>的作用是将文件添加到暂存区</p>
<p><code>git commit</code> 的作用是把暂存区的所有内容提交到当前分支</p>
<h2 id="4-管理（修改-撤销-删除）"><a href="#4-管理（修改-撤销-删除）" class="headerlink" title="4.管理（修改 撤销 删除）"></a>4.管理（修改 撤销 删除）</h2><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></p>
<p>上述操作会导致第二次修改无效，它并没有提交到暂存区。</p>
<p>所以要这样操作</p>
<p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit</code></p>
<p><strong>工作区 –git add–&gt; 暂存区 –git commit–&gt; 版本库</strong></p>
<p>在工作区修改文件后还没有放到暂存区，若需要撤销修改可用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- test.txt</span><br></pre></td></tr></table></figure>

<p>分为两种情况：</p>
<p>1.<code>test.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库（版本库和暂存区一样）一模一样的状态；</p>
<p>2.<code>test.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<p><strong>总之就是把工作区的修改撤销，回到最近一次<code>git add</code>时的状态。</strong></p>
<p>在工作区修改文件后，把文件add到了暂存区，若需修改可用：</p>
<p><code>git reset HEAD test.txt</code></p>
<p>这样，就把暂存区的文件撤销，重新放回工作区(回退)。再用<code>git checkout -- test.txt</code>清空工作区。</p>
<p>commit提交到版本库可<code>git reset --hard HEAD^</code>回退。可见<strong><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。</strong></p>
<p>当然，这只是本地版本库。提交到远程版本库就不行了。因为Git是分布式的。</p>
<p>删除一个文件，通常只在文件管理器中删掉即可。这时工作区和版本库就不一致了。</p>
<p>如果确实要删掉它，直接<code>git commit</code>即可。</p>
<p>不小心删除则可用<code>git checkout -- test.txt</code>恢复，可见<strong><code>git checkout</code>其实是用 暂存区里的版本 替换 工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</strong></p>
<p><u>见解</u></p>
<p>git rm file并且git commit并不是删除了版本库里的某个版本号，而是对工作目录下的删除操作进行了一个记录，会在仓库里生成一个新的版本号，在该版本下没有该文件。但是可以用git reset –hard commit_id进行版本回退，回退到有这个文件的版本号。而git checkout commit_id file命令是从含有该文件的旧版本号里把该文件拿出来，放到现版本里，版本号不改变。</p>
<p>当你要删除文件的时候，可以采用命令：rm test.txt</p>
<p><strong>这个时候</strong>（也就是说这个时候只执行了rm test.txt）有两种情况</p>
<p>第一种情况:的确要把test.txt删掉，那么可以执行 git rm test.txt git commit -m “remove test.txt” 然后文件就被删掉了</p>
<p>第二种情况:删错文件了，不应该删test.txt，注意这时只执行了rm test.txt，还没 有提交，所以可以执行git checkout test.txt将文件恢复。</p>
<p><strong>并不是说</strong>执行完git commit -m “remove test.txt”后还能用checkout恢复，commit之后版本库里的文件也没了，自然没办法用checkout恢复，而是要用其他的办法     【git rm】命令来删除的文件，这个命令是删除了Git暂存区的test.txt文件</p>
<p>这样更容易理解吧，暂存区也是维持文件版本的，当git commit后暂存区和分支版本一致。只git add ，没有git commit，此时，暂存区比分支新一个版本。</p>
<p>那么，git checkout – <file> 就是在工作区恢复暂存区版本而已，它只和暂存区打交道。只不过当git commit后，没有再进行git add，此时暂存区和分支版本一致，</p>
<p>看起来是恢复的分支版本，其实还是恢复的暂存区版本。所以<b>只是让文件回到最近一次 git add而已</b></p>
<p>假设工作区的文件add且commit过一次</p>
<p>然后再进行下面的操作:</p>
<ul>
<li>在工作区修改了文件, 但是还没有add到暂存区<br>执行下面的命令, 可以恢复到与最后的版本一致的状态, 也就是修改前的状态</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- 文件名</span><br></pre></td></tr></table></figure>

<ul>
<li>已经add到暂存区, 然后在工作区修改了文件<br>执行下面的命令, 可以恢复到和暂存区一致的状态</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- 文件名</span><br></pre></td></tr></table></figure>

<p>前面2种情况, 都是在工作区修改了文件, 修改的状态还没有add到暂存区</p>
<ul>
<li>修改了文件, 又add到了暂存区, 但是还没有commit<br>执行下面的命令, 可以将暂存区的文件退回到工作区</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD 文件名</span><br></pre></td></tr></table></figure>

<p>退回到工作区的文件是被修改过的, 那么再执行下面的命令, 可以恢复到未修改的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- 文件名</span><br></pre></td></tr></table></figure>

<p>1.如果你用的rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用git checkout – <file>就可以 2.如果你用的是git rm删除文件，那就相当于不仅删除了文件，而且还添加到了暂存区，需要先git reset HEAD <file>，然后再git checkout – <file> 3.如果你想彻底把版本库的删除掉，先git rm，再git commit 就ok了</p>
<p><strong>注意这些都是行为！！！</strong></p>
<h2 id="5-远程仓库（推送-克隆）"><a href="#5-远程仓库（推送-克隆）" class="headerlink" title="5.远程仓库（推送 克隆）"></a>5.远程仓库（推送 克隆）</h2><p>1.先前已经绑定了ssh key，接下来只需创建远程仓库。在github中创建远程库后，在本地运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:coltnagisa&#x2F;test.git</span><br></pre></td></tr></table></figure>

<p>coltnagisa是账户名，test是仓库名。origin代表远程库，是git的默认叫法。</p>
<p>要想把本地库推送到远程库，可用<code>git push</code>。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>加上-u，在第一次推送时，在推送的同时，还可以把本地与远程关联起来。以后提交只需：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>2.创建一个新的远程仓库并勾选Initialize this repository with a README，远程仓库建好后就可用<code>git clone</code>克隆一个本地库。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:coltnagisa&#x2F;test.git</span><br></pre></td></tr></table></figure>

<p>这个就是ssh的传输，也可以使用https，如下：</p>
<p><code>git clone https://github.com/coltnagisa/test.git</code></p>
<p>ssh会快些。</p>
]]></content>
      <tags>
        <tag>CS沉思</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派clash</title>
    <url>/2020/05/23/6/</url>
    <content><![CDATA[<h1 id="Clash在树莓派上的实现"><a href="#Clash在树莓派上的实现" class="headerlink" title="Clash在树莓派上的实现"></a>Clash在树莓派上的实现</h1><p>树莓派吃灰已久，原来做过小型服务器和下载机。这次尝试在树莓派上部署Clash。</p>
<h2 id="下载clash"><a href="#下载clash" class="headerlink" title="下载clash"></a>下载clash</h2><p>创建clash目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir clash</span><br></pre></td></tr></table></figure>

<p>在clash目录中下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo wget https:&#x2F;&#x2F;github.com&#x2F;Dreamacro&#x2F;clash&#x2F;releases&#x2F;download&#x2F;v0.16.0&#x2F;clash-linux-armv7-v0.16.0.gz</span><br></pre></td></tr></table></figure>

<p><em>注意是arm版本</em></p>
<p><img src="https://s1.ax1x.com/2020/05/23/YxnwHx.png" alt="clash1"></p>
<p>解压并重命名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xzf clash-linux-armv8.tar.gz -O &gt; clash</span><br></pre></td></tr></table></figure>

<p>赋予权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x clash</span><br></pre></td></tr></table></figure>

<h2 id="配置clash"><a href="#配置clash" class="headerlink" title="配置clash"></a>配置clash</h2><p>这时候会在/home/pi/.config/clash中生成config.yaml的文件。</p>
<p>Country.mmdb为全球IP库，可以实现各个国家的IP信息解析和地理定位，没有这个文件clash是无法运行的。但是现在的发行版好像有一个bug，就是无法自动生成这个IP库文件，并且终端中提供的网址也无法下载。可在网上找到Country.mmdb。</p>
<p>将Country.mmdb拷贝到clash目录下。</p>
<p>在第一次运行clash时，config文件为空。可购买机场，下载clash文件。</p>
<p><img src="https://s1.ax1x.com/2020/05/23/YxnRKA.png" alt="clash2"></p>
<p>将config.yml文件放至clash目录下，完成。</p>
<p>也可以在使用 <a href="http://clash.razord.top" target="_blank" rel="noopener">http://clash.razord.top</a>  控制面板切换节点和模式。</p>
]]></content>
      <tags>
        <tag>CS沉思</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年度总结</title>
    <url>/2020/12/25/9/</url>
    <content><![CDATA[<h2 id="今年"><a href="#今年" class="headerlink" title="今年"></a>今年</h2><p>​    2020对大多数人来说都是不平凡的一年。对我而言，今年的影响不如去年。虽然这一年我没什么的特别的收获，但不能说什么也没有变化。我从今年开始写年度总结，为来年做好规划，为以后的我做参考。</p>
<h2 id="大事件"><a href="#大事件" class="headerlink" title="大事件"></a>大事件</h2><h3 id="碧桂园"><a href="#碧桂园" class="headerlink" title="碧桂园"></a>碧桂园</h3><p>碧桂园的新房准备的差不多了，这个变化对我父母而言意义重大。我上了大学后，家里的情况不再像原来那样了。我为父母高兴，他们没有只为自己的孩子考虑，感谢他们。</p>
<h3 id="奥迪"><a href="#奥迪" class="headerlink" title="奥迪"></a>奥迪</h3><p>今年末，父亲买了Q5L 45TFSI。很高兴父亲能改变自己的观念，也很高兴家里有一辆Q5L。</p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>今年的收获主要有：</p>
<p>博客（学习了一些前端和网络的皮毛）</p>
<p>树莓派（熟悉Linux，搞了一些小项目）</p>
<p>Linux</p>
<p>Shell</p>
<p>GitHub + Twitter（2015年的账号，今年在twitter认识了不少同年龄的大佬，在GitHub上找到不少好的开源项目）</p>
<p>Java</p>
<p>数据结构</p>
<p>汇编语言</p>
<p>数据库</p>
<p>基金和理财（经过两年理财，今年开始买基金）</p>
<p>哲学（开始对哲学感兴趣）</p>
<p>汽车（上了高速 跑了市区 过了实习期）</p>
<h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>​    从去年开始，自己的心理状况就不是很好。这一年里，每天都有不同程度的折磨，我也尝试了一些方法，总而言之，比去年末要好些。但今年出现了一些新的状况，虽然类型繁多，但对我的压力要比去年那次小不少。现在主要还是强迫思维和焦虑症，希望我能看清现实，找到自己的答案。</p>
<p>​    多亏这次疫情，让我在家体重长了20斤，在学校的四个月里，我减了差不多10斤。希望明年能减20斤。</p>
<p>​    总之，希望来年身心健康。</p>
<h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><h3 id="今年的喜爱番剧"><a href="#今年的喜爱番剧" class="headerlink" title="今年的喜爱番剧"></a>今年的喜爱番剧</h3><p>今年对我影响较深的番剧大部分是老番，新番对我的吸引力越来越小。以下无先后顺序：</p>
<p>齐木楠雄的灾难 始动篇</p>
<p>花开物语</p>
<p>吹响吧！上低音号</p>
<p>比宇宙更远的地方</p>
<p>摇曳露营</p>
<p>GJ部</p>
<p>银之匙</p>
<p>珈百璃的堕落</p>
<p>辉夜大小姐想让我告别 第二季</p>
<p>邪神与厨二病少女 第二季</p>
<p>紫罗兰永恒花园 外传 —永远与自动手记人偶</p>
<p>迷糊餐厅</p>
<p>电波女与青春男</p>
<p>三月的狮子</p>
<p>悠哉日常大王</p>
<p>来玩游戏吧</p>
<p>女仆咖啡厅</p>
<p>路人女主的养成方法 第二季 + 电影</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>摩登家庭</p>
<p>top gear总集篇</p>
<h3 id="今年的喜爱书籍"><a href="#今年的喜爱书籍" class="headerlink" title="今年的喜爱书籍"></a>今年的喜爱书籍</h3><p>《且听风吟》</p>
<p>《1973年的弹子球》</p>
<p>《寻羊冒险记》</p>
<p>《迟来的翅膀》</p>
<p>还有些编程方面的就不罗列了</p>
<h3 id="今年的喜爱游戏"><a href="#今年的喜爱游戏" class="headerlink" title="今年的喜爱游戏"></a>今年的喜爱游戏</h3><p>生化奇兵：无限（本体+海葬DLC）</p>
<p>耻辱</p>
<p>奇异人生（和生化奇兵、耻辱一样 高中开始玩 现在才通关）</p>
<p>文明6</p>
<p>真三国无双7</p>
<p>守望先锋</p>
<h3 id="今年得到的新装备"><a href="#今年得到的新装备" class="headerlink" title="今年得到的新装备"></a>今年得到的新装备</h3><p>iPhone XR</p>
<p>Apple Watch series4</p>
<p>联想小新air14 锐龙</p>
<p>树莓派 4b</p>
<h3 id="小事件"><a href="#小事件" class="headerlink" title="小事件"></a>小事件</h3><p>第一次打工：去高中的补习班当助教 赚了1k</p>
<p>参加了两次四级考试</p>
<p>第一次参加校级比赛</p>
<p>驾照过了实习期</p>
<p>因德育 体育没拿到奖学金</p>
<p>Java和C考试第一</p>
<h2 id="来年"><a href="#来年" class="headerlink" title="来年"></a>来年</h2><p>​    今年还算是顺利，没有遇到特别不愉快的事情。以下是我的期望：</p>
<p>有自己满意的编程能力</p>
<p>做出自己满意的开源项目</p>
<p>身心健康</p>
<p>有女朋友</p>
<p>2021年初我就20岁了，希望20岁的我能离答案更近，能实现自己的目标。</p>
<p>Colt写于2020年圣诞节</p>
]]></content>
      <tags>
        <tag>年度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>评论系统</title>
    <url>/2020/04/25/3/</url>
    <content><![CDATA[<p><strong>现在为博客添加评论</strong></p>
<p>Next主题</p>
<p>这里使用valine，基于leancloud，比较稳定。</p>
<p>在<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a>创建账户并创建开发板。在存储中创建名为Comment、Counter的两个Class，权限为所有用户可以访问。<img src="https://s1.ax1x.com/2020/04/25/Jsm9IA.png" alt="valine"></p>
<p>在设置 安全中心中将服务开关除数据存储外全部关闭，Web安全域名中添加自己的域名。</p>
<p><img src="https://s1.ax1x.com/2020/04/25/JsniTJ.png" alt="安全"></p>
<p>在设置 应用Keys中找到appid与appkey并复制</p>
<p>在主题的_config.yml文件中找到valine（612行）粘贴自己的appid与appkey。</p>
<p><strong>注意将enable设置为true。</strong></p>
<p><img src="https://s1.ax1x.com/2020/04/25/JsngXT.png" alt="配置"></p>
<p>接下来更换valine CDN</p>
<p>在<a href="https://www.jsdelivr.com/package/npm/valine" target="_blank" rel="noopener">jsdelivr</a>中找到最新CDN copy URL</p>
<p><img src="https://s1.ax1x.com/2020/04/25/Jsn4AJ.png" alt="cdn"></p>
<p>在主题_config.yml文件中找到valine CDN（945行）粘贴</p>
<p><img src="https://s1.ax1x.com/2020/04/25/Jsnz4A.png" alt="cdn1"></p>
<p>保存 git后出现评论 test成功</p>
<p><img src="https://s1.ax1x.com/2020/04/25/JsuZNj.png" alt="实现"></p>
<p>评论后leancloud中会在Comment中生成数据，可以进行管理。</p>
<p><img src="https://s1.ax1x.com/2020/04/25/JsusVe.png" alt="管理"></p>
]]></content>
      <tags>
        <tag>CS沉思</tag>
      </tags>
  </entry>
  <entry>
    <title>新电脑</title>
    <url>/2020/07/28/8/</url>
    <content><![CDATA[<p>   一周前在推特上看见了一台二手的Surface Laptop，下定决心要换电脑。左思右想没有买那台Surface而是定了新出不久的小新Air14，这也是我时隔七年再次用上AMD的CPU。十几年前我的旧台式机用的是AMD四核速龙，14年买的联想Y410P和15年买的Macmini都是四代i5，当时的我绝对不会想到七年后我会再次用上AMD。Y410P是我平时最常用的。上高中时，我给它加了8G内存 换了480G的SSD。上了大学，换了电池 屏幕 网卡。其实是可以坚持四年的，但2.5千克的重量和1366*768 45%NTSC色域 低频PWM调光的屏幕实在让我恶心。Mac在家里除了用Xcode还真没怎么用。今年初下单了MBP13 2019。刚下单不久就刷到了2020的消息，Apple Store的店员还向我保证13寸近期不会更新。取消订单，等2020款。还好没有买Mbp，省下钱可以预定几个手办了。</p>
<p>   小新Air14搭载AMD锐龙4600U，六核十二线程。比我原来的i5 4200M要好太多。没有独显，1920*1080 100%sRGB色域 DC调光，16G板载双通道DDR4 3200MHz内存，512G nvme TLC 三星pm981a SSD。其实还有西数黑盘SN730版，比较庆幸拿到三星的。<br><img src="https://s1.ax1x.com/2020/07/28/aEvAxJ.png" alt="cpu" style="zoom: 50%;" /><img src="https://s1.ax1x.com/2020/07/28/aEvk24.png" alt="cpu2" style="zoom:50%;" /></p>
<p>   作为轻薄本，小新air14只有1.4千克，用USB-C口充电。比较扯的是联想没有送便携充电器，买了个第三方65W PD充电器，比原来方便太多。键盘手感不如Y410P，毕竟是厚度小，键程也比较短。总之小新air14已经足够我用了。</p>
<p>   希望小新air14也可以坚持七年，可能是我太穷 境界不够或者与电子产品消费观、认知有关。对我个人而言，电子产品就是工具和消耗品。一心想通过电子产品满足自己的优越感以提升自己地位与他人攀比的，真的很没水平。</p>
]]></content>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
</search>
